---

# == Description
# This pipeline has more Jobs
# 1. Unit Test
# 1. Build and publish artifact(s) to S3 Store
# 2. Deploy it to PWS

jobs:
  # Unit Test
  - name: unit-tests
    plan:
    - get: resource-git
      trigger: true
    - get: image-javagradlegitpack
    - task: unit
      image: image-javagradlegitpack
      file: resource-git/ci/tasks/unit.yml

  # Build Artifacts
  - name: build
    serial_groups: [version]
    serial: true
    plan:
    # Clone the Git Repo
    - get: resource-git
      passed: [unit-tests]
      trigger: true
    # Version it as Release Candidate
    - get: version
      params: { pre: rc }
    # Build the apps by Gradle
    - get: image-javagradlegitpack
    - task: build-artifact
      image: image-javagradlegitpack
      file: resource-git/ci/tasks/build-artifact.yml
      timeout: 10m
    # Publish the RC *.jar to bucket
    - put: bucket-release-candidate
      params:
        file: artifact-dir/spring-music*.jar
    - put: version
      params: {file: version/number}

  # SIT
  - name: sit
    serial_groups: [version]
    plan:
    # Aggregate the inputs for further SIT
    - aggregate:
      - get: version
        passed: [build]
        trigger: true
      - get: bucket-release-candidate
        passed: [build]
      - get: resource-git
        passed: [build]
    # Deploy app to Test Env
    - put: cf-dev
      params:
        manifest: resource-git/manifest-dev.yml
        vars:
          name: ((app.dev.name))
        current_app_name: ((app.dev.name))
        path: bucket-release-candidate/spring-music*.jar
    # Verify the app whether it's been successfully deployed
    - get: image-javagradlegitpack
    - task: verify
      image: image-javagradlegitpack
      file: resource-git/ci/tasks/verify-test.yml
      params:
        app_url: ((app.dev.url))

  # Promote to UAT after test has been verified
  - name: promote-to-uat
    serial_groups: [version]
    plan:
    # Aggregate inputs for UAT
    - aggregate:
      - get: version
        passed: [sit]
        trigger: true
      - get: bucket-release-candidate
      - get: resource-git
    # Deploy to UAT Env
    - put: cf-uat
      params:
        manifest: resource-git/manifest-uat.yml
        vars:
          name: ((app.uat.name))
        current_app_name: ((app.uat.name))
        path: bucket-release-candidate/spring-music*.jar

  # Finally deploy it to PROD Env
  - name: promote-to-prod
    serial_groups: [version]
    serial: true
    plan:
    # Aggregate the inputs for PROD
    # Note: intentionally not set the trigger here
    - aggregate:
      - get: version
        params: { bump: final }
        passed: [promote-to-uat]
      - get: bucket-release-candidate
      - get: resource-git
    # Prepare for final
    - get: image-javagradlegitpack
    - task: prepare-final
      image: image-javagradlegitpack
      file: resource-git/ci/tasks/prepare-final.yml
      params:
        base_name: spring-music
    # Put it to bucket
    - put: bucket-production-release
      params:
        file: final-dir/spring-music*.jar
    # Deploy app to PROD Env
    - put: cf-prod
      params:
        manifest: resource-git/manifest-prod.yml
        vars:
          name: ((app.prod.name))
        current_app_name: ((app.prod.name))
        path: final-dir/spring-music*.jar

  - name: tag-it
    serial_groups: [version]
    plan:
      - get: version
        params: {bump: final}
        passed: [promote-to-prod]
        trigger: true
      # Tag the Git Repo for the release
      - get: resource-git
        passed: [promote-to-prod]
        trigger: true
      - put: resource-git
        params:
          repository: resource-git
          tag: version/number
          #annotate: "tagged by Concourse"
      # Release a new version
      - put: version
        params: { bump: patch }

##############################################################################

# Resources
resources:
# Custom Image
- name: image-javagradlegitpack
  type: docker-image
  source:
    repository: ((image.repository))
    insecure_registries: ((image.insecure_registries))
    tag: ((image.tag))

# Git Resource
- name: resource-git
  type: git
  source:
    uri: ((git.uri))
    branch: ((git.branch))
    private_key: ((git.private_key))

# CF Resource for Test
- name: cf-dev
  type: cf
  source:
    api: ((cf.dev.api))
    username: ((cf.dev.username))
    password: ((cf.dev.password))
    organization: ((cf.dev.organization))
    space: ((cf.dev.space))
    skip_cert_check: ((cf.dev.skip_cert_check))

# CF Resource for UAT
- name: cf-uat
  type: cf
  source:
    api: ((cf.uat.api))
    username: ((cf.uat.username))
    password: ((cf.uat.password))
    organization: ((cf.uat.organization))
    space: ((cf.uat.space))
    skip_cert_check: ((cf.uat.skip_cert_check))

# CF Resource for PROD
- name: cf-prod
  type: cf
  source:
    api: ((cf.prod.api))
    username: ((cf.prod.username))
    password: ((cf.prod.password))
    organization: ((cf.prod.organization))
    space: ((cf.prod.space))
    skip_cert_check: ((cf.prod.skip_cert_check))

# Semver
- name: version
  type: semver
  source:
    driver: s3
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.access_key_secret))
    bucket: ((s3.buckets.version.name))
    key: ((s3.buckets.version.key))
    initial_version: ((s3.buckets.version.initial_version))
    disable_ssl: true

# S3 bucket for release candidates
- name: bucket-release-candidate
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.access_key_secret))
    bucket: ((s3.buckets.release-candidates.name))
    regexp: ((s3.buckets.release-candidates.regexp))
    disable_ssl: true

# S3 bucket for final releases
- name: bucket-production-release
  type: s3
  source:
    endpoint: ((s3.endpoint))
    access_key_id: ((s3.access_key_id))
    secret_access_key: ((s3.access_key_secret))
    bucket: ((s3.buckets.releases.name))
    regexp: ((s3.buckets.releases.regexp))
    disable_ssl: true
