---

# == Description
# This pipeline has more Jobs
# 1. Unit Test
# 1. Build and publish artifact(s) to S3 Store
# 2. Deploy it to PWS

jobs:
  # Unit Test
  - name: unit-tests
    plan:
    - get: resource-git
      trigger: true
    - task: unit
      file: resource-git/ci/tasks/unit.yml
      params:
        docker_image: ((DOCKER_IMAGE))

  # Build Artifacts
  - name: build-artifact
    serial_groups: [version]
    serial: true
    plan:
    # Clone the Git Repo
    - get: resource-git
      passed: [unit-tests]
      trigger: true
    # Version it as Release Candidate
    - get: version
      params: { pre: rc }
    # Build the apps by Gradle
    - task: build-artifact
      file: resource-git/ci/tasks/build-artifact.yml
      timeout: 10m
      params:
        docker_image: ((DOCKER_IMAGE))
    # Publish the RC *.jar to bucket
    - put: bucket-release-candidate
      params:
        file: artifact-dir/spring-music*.jar
    # Tag the Git Repo with the RC
    #- put: resource-git
    #  params:
    #    repository: resource-git
    #    tag: version/number
    # Bump the version number
    - put: version
      params: {file: version/number}

  # SIT
  - name: integration-tests
    serial_groups: [version]
    plan:
    # Aggregate the inputs for further SIT
    - aggregate:
      - get: version
        passed: [build-artifact]
        trigger: true
      - get: bucket-release-candidate
        passed: [build-artifact]
      - get: resource-git
        passed: [build-artifact]
    # Deploy app to Test Env
    - put: cf-deploy-test-app
      params:
        manifest: resource-git/manifest-test.yml
        current_app_name: ((CURRENT_APP_NAME_SIT))
        path: bucket-release-candidate/spring-music*.jar
    # Verify the app whether it's been successfully deployed
    - task: verify
      file: resource-git/ci/tasks/verify-test.yml
      params:
        docker_image: ((DOCKER_IMAGE))
        concourse_demo_url: ((VERIFY_URL))

  # Promote to UAT after test has been verified
  - name: promote-to-uat
    serial_groups: [version]
    plan:
    # Aggregate inputs for UAT
    - aggregate:
      - get: version
        passed: [integration-tests]
        trigger: true
      - get: bucket-release-candidate
        passed: [integration-tests]
      - get: resource-git
        passed: [integration-tests]
    # Deploy to UAT Env
    - put: cf-deploy-uat-app
      params:
        manifest: resource-git/manifest-uat.yml
        current_app_name: ((CURRENT_APP_NAME_UAT))
        path: bucket-release-candidate/spring-music*.jar

  # Finally deploy it to PROD Env
  - name: ship-it
    serial_groups: [version]
    serial: true
    plan:
    # Aggregate the inputs for PROD
    # Note: intentionally not set the trigger here
    - aggregate:
      - get: bucket-release-candidate
        passed: [promote-to-uat]
      - get: version
        params: { bump: final }
        passed: [promote-to-uat]
      - get: resource-git
        passed: [promote-to-uat]
    # Prepare for final
    - task: prepare-final
      file: resource-git/ci/tasks/prepare-final.yml
      params:
        docker_image: ((DOCKER_IMAGE))
        base_name: spring-music
    # Put it to bucket
    - put: bucket-production-release
      params:
        file: final-dir/spring-music*.jar
    # Deploy app to PROD Env
    - put: cf-deploy-production-app
      params:
        manifest: resource-git/manifest-prod.yml
        current_app_name: ((CURRENT_APP_NAME_PROD))
        path: final-dir/spring-music*.jar

#  - name: major
#    serial_groups: [ version ]
#    plan:
#      - put: version
#        params: { bump: major, pre: rc }
#
#  - name: minor
#    serial_groups: [ version ]
#    plan:
#      - put: version
#        params: { bump: minor, pre: rc }

  - name: tag-it
    serial_groups: [version]
    plan:
      - get: version
        params: {bump: final}
        passed: [ship-it]
        trigger: true
      # Tag the Git Repo for the release
      - get: resource-git
        passed: [ship-it]
        trigger: true
      - put: resource-git
        params:
          repository: resource-git
          tag: version/number
          #annotate: "tagged by Concourse"
      # Release a new version
      - put: version
        params: { bump: patch }

##############################################################################

# Resources
resources:

# Git Resource
- name: resource-git
  type: git
  source:
    uri: ((GIT_REPO))
    branch: master
    private_key: ((GIT_PRIVATE_KEY.private_key))

# CF Resource for Test
- name: cf-deploy-test-app
  type: cf
  source:
    api: ((CF_API))
    username: ((CF_USER))
    password: ((CF_PASSWD))
    organization: ((CF_TEST_ORG))
    space: ((CF_TEST_SPACE))
    skip_cert_check: true

# CF Resource for UAT
- name: cf-deploy-uat-app
  type: cf
  source:
    api: ((CF_API))
    username: ((CF_USER))
    password: ((CF_PASSWD))
    organization: ((CF_UAT_ORG))
    space: ((CF_UAT_SPACE))
    skip_cert_check: true

# CF Resource for PROD
- name: cf-deploy-production-app
  type: cf
  source:
    api: ((CF_API))
    username: ((CF_USER))
    password: ((CF_PASSWD))
    organization: ((CF_PROD_ORG))
    space: ((CF_PROD_SPACE))
    skip_cert_check: true

# Semver
- name: version
  type: semver
  source:
    driver: s3
    bucket: ((S3_BUCKET_RELEASE))
    key: ((S3_VERSION_FILE))
    access_key_id: ((S3_ACCESS_KEY_ID))
    secret_access_key: ((S3_SECRET_ACCESS_KEY))
    endpoint: ((S3_ENDPOINT))
    disable_ssl: true
    initial_version: 1.0.0

# S3 bucket for release candidates
- name: bucket-release-candidate
  type: s3
  source:
    bucket: ((S3_BUCKET_RC))
    #versioned_file: ((S3_VERSION_FILE))
    regexp: ((S3_RC_REGEXP))
    access_key_id: ((S3_ACCESS_KEY_ID))
    secret_access_key: ((S3_SECRET_ACCESS_KEY))
    endpoint: ((S3_ENDPOINT))
    disable_ssl: true

# S3 bucket for final releases
- name: bucket-production-release
  type: s3
  source:
    bucket: ((S3_BUCKET_RELEASE))
    #versioned_file: ((S3_VERSION_FILE))
    regexp: ((S3_PROD_REGEXP))
    access_key_id: ((S3_ACCESS_KEY_ID))
    secret_access_key: ((S3_SECRET_ACCESS_KEY))
    endpoint: ((S3_ENDPOINT))
    disable_ssl: true
